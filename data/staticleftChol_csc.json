[
  [
    {
      "Name" : "Left Cholesky CSC",
      "CHILL analysis info" : 
      [
        {
           "Script file" : "data/tempData/staticleftChol_csc.py",
           "Source" : "data/staticleftChol_csc.c",
           "Destination" : "data/tempData/staticleftChol_csc_mod.c",
           "Procedure" : "staticleftChol_csc",
           "Loop" : "0",
           "Output file" : "data/tempData/staticleftChol_csc.txt",
           "Private Arrays" : "",
           "Reduction Statements" : ""
        }
      ],

      "z3 info" : 
      [
        {
           "Path" : "data/tempData/staticleftChol_csc_z3",
           "timeout" : "2000",
           "Extra Symbols" : ["nnz", "nnz_L"]
        }
      ],

      "Result" : "results/staticleftChol_csc",

      "UFS" :
      [
        { 
           "Name" : "lC",
           "Domain" : "{[i]: 0<=i && i<=n}",
           "Range" : "{[j]: 0<=j && j<=nnz_L}",
           "Bijective" : "false",
           "Monotonicity" : "Monotonic_Increasing"
        },
        { 
           "Name" : "lR",
           "Domain" : "{[i]: 0<=i && i<=nnz_L}",
           "Range" : "{[j]: 0<=j && j<=n}",
           "Bijective" : "false",
           "Monotonicity" : "Monotonic_NONE"
        },
        { 
           "Name" : "prunePtr",
           "Domain" : "{[i]: 0<=i && i<=n}",
           "Range" : "{[j]: 0<=j && j<=nnz_L}",
           "Bijective" : "false",
           "Monotonicity" : "Monotonic_Increasing"
        },
        { 
           "Name" : "pruneSet",
           "Domain" : "{[i]: 0<=i && i<=nnz_L}",
           "Range" : "{[j]: 0<=j && j<=n}",
           "Bijective" : "false",
           "Monotonicity" : "Monotonic_NONE"
        },
        { 
           "Name" : "vC",
           "Domain" : "{[i]: 0<=i && i<=n}",
           "Range" : "{[j]: 0<=j && j<=nnz}",
           "Bijective" : "false",
           "Monotonicity" : "Monotonic_Increasing"
        },
        { 
           "Name" : "vR",
           "Domain" : "{[i]: 0<=i && i<=nnz}",
           "Range" : "{[j]: 0<=j && j<=n}",
           "Bijective" : "false",
           "Monotonicity" : "Monotonic_NONE"
        }
      ],
      "User Defined" :
      [
        {
          "Type" : "Triangularity",
          "UniQuantVar" : "[e1,e2]",
          "Rule (comment)" : "Forall e1,e2,  vC(e1) < e2 => e1 < vR(e2)",
          "p" : "vC(e1) < e2",
          "q" : "e1 < vR(e2)"
        },
        {
          "Type" : "Triangularity",
          "UniQuantVar" : "[e1,e2]",
          "Rule (comment)" : "Forall e1,e2,  e1 < prunePtr(e2) => pruneSet(e1) < e2",
          "p" : "e1 < prunePtr(e2)",
          "q" : "pruneSet(e1) < e2"
        },
        {
          "Type" : "Triangularity",
          "UniQuantVar" : "[e1,e2]",
          "Rule (comment)" : "Forall e1,e2,  lC(e1) < e2 => e1 < lR(e2)",
          "p" : "lC(e1) < e2",
          "q" : "e1 < lR(e2)"
        },
        {
          "Type" : "CoMonotonicity",
          "UniQuantVar" : "[e1,e2,e3]",
          "Rule (comment)" : "Forall e1,e2,e3  vC(e1) <= e2 < vC(e1+1) && vC(e1) <= e3 < vC(e1+1) && e2 < e3  => vR(e2) != vR(e3)",
          "p" : "vC(e1) <= e2 < vC(e1+1) && vC(e1) <= e3 < vC(e1+1) && e2 < e3",
          "q" : "vR(e2) < vR(e3)"
        },
        {
          "Type" : "CoMonotonicity",
          "UniQuantVar" : "[e1,e2,e3]",
          "Rule (comment)" : "Forall e1,e2,e3  lC(e1) <= e2 < lC(e1+1) && lC(e1) <= e3 < lC(e1+1) && e2 < e3  => lR(e2) != lR(e3)",
          "p" : "lC(e1) <= e2 < lC(e1+1) && lC(e1) <= e3 < lC(e1+1) && e2 < e3",
          "q" : "lR(e2) < lR(e3)"
        },
        {
          "Type" : "CoMonotonicity",
          "UniQuantVar" : "[e1,e2,e3]",
          "Rule (comment)" : "Forall e1,e2,e3  prunePtr(e1) < e2 < prunePtr(e1+1) && prunePtr(e1) < e3 < prunePtr(e1+1) && e2 < e3  => pruneSet(e2) != pruneSet(e3)",
          "p" : "prunePtr(e1) < e2 < prunePtr(e1+1) && prunePtr(e1) < e3 < prunePtr(e1+1) && e2 < e3",
          "q" : "pruneSet(e2) < pruneSet(e3)"
        }
      ],

      "Kernel Complexity" : "O(nnz^2/n^1)",

      "Missing induction iterator constraints" :
      [
      ],
      "Do Not Project Out" :
      [
        "In_2", "Out_2"
      ]
    }
  ]
]
